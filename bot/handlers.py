from aiogram import Router, Bot, F
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery

from bot.curiers_callbacks import get_curier_info
from bot.workers_callbacks import get_order_info
from config import MANAGERS_IDS
from bot.sender import Sender
from database.engine import Database
from bot.keyboards import Keyboards
from bot.fsm import FSM

r = Router()


async def menu(message: Message, sender: Sender, kb: Keyboards, db: Database, state: FSMContext, message_id: int = None):
    await state.clear()
    if not message.chat.type == 'private':
        return await sender.sm(
            text='üí≠  <b>–î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏, '
                 '–≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö</b>',
            chat_id=message.chat.id
        )
    await state.clear()
    if message.chat.id in MANAGERS_IDS:
        return await sender.sm(
            message_id=message_id,
            text='üíº  <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>',
            chat_id=message.chat.id,
            reply_markup=kb.main_kb()
        )

    request = await db.get_request(telegram_id=message.chat.id)

    if not request:

        if message.chat.username is None:
            return await sender.sm(
                message_id=message_id,
                text='üí≠  <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å. –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏, '
                     '–≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —é–∑–µ—Ä–Ω–µ–π–º –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞</b>',
                chat_id=message.chat.id
            )

        return await sender.sm(
            message_id=message_id,
            text='üí≠  <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å. –î–∞–Ω–Ω—ã–π –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –∫—É—Ä—å–µ—Ä. '
                 '–ü—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é?</b>',
            chat_id=message.chat.id,
            reply_markup=kb.register_kb()
        )

    if request.is_accepted is None:
        return await sender.sm(
            message_id=message_id,
            text='üí≠  <b>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, –æ–∂–∏–¥–∞–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ</b>',
            chat_id=message.chat.id
        )

    if not request.is_accepted:
        return await sender.sm(
            message_id=message_id,
            text='‚ùå  <b>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –° –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è</b>',
            chat_id=message.chat.id
        )

    if request.is_accepted:

        curier = await db.get_curier(telegram_id=message.chat.id)

        if curier is None:
            return await sender.sm(
                message_id=message_id,
                text=f'‚ö†  –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã. –°–æ–æ–±—â–∏—Ç–µ –æ –ø—Ä–æ–±–ª–µ–º–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É',
                chat_id=message.chat.id
            )

        if curier.is_banned:
            return await sender.sm(
                message_id=message_id,
                text=f'‚ö†  –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª. –° –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è',
                chat_id=message.chat.id
            )

        text = 'üíº  <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:\n'
        text += f'üí∞  –ë–∞–ª–∞–Ω—Å: {curier.balance} ‚ÇΩ\n'
        text += (f'üí†  –í–∞—à —Å—Ç–∞—Ç—É—Å:  '
                 f'{"‚úÖ –°–≤–æ–±–æ–¥–µ–Ω" if (curier.is_available and curier.order is None) else "üí§ –ó–∞–Ω—è—Ç"}</b>\n\n')

        if curier.order:
            text += 'üí≠  <b>–í–∞—à –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑</b>\n'
            order = await db.get_order(id=curier.order.id)
            user = await db.get_user(id=order.user_id)
            address = await db.get_user_address(id=order.address_id)
            text += (f'üåé  –ê–¥—Ä–µ—Å: {address.street} –¥. {address.house} –ø–æ–¥. {address.entrance} –∫–≤. {address.flat} '
                     f'—ç—Ç. {address.floor}\n')
            text += f'üë§  –ò–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è: {user.name if user.name else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}\n'
            if address.comment:
                text += f'üí≠  –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {address.comment}\n'
            text += f'üïì  –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è: {order.time_to_delivery}\n\n'
        return await sender.sm(
            message_id=message_id,
            text=text,
            chat_id=message.chat.id,
            reply_markup=kb.worker_kb(curier=curier)
        )

@r.message(CommandStart())
async def start(message: Message, sender: Sender, kb: Keyboards, db: Database, state: FSMContext):
    await message.delete()
    await menu(message=message, sender=sender, kb=kb, db=db, state=state)

@r.callback_query(F.data == 'menu')
async def menu_callback(call: CallbackQuery, sender: Sender, kb: Keyboards, state: FSMContext, db: Database):
    await menu(message=call.message, sender=sender, kb=kb, db=db, state=state, message_id=call.message.message_id)

@r.message(FSM.set_curier_balance)
async def set_curier_balance(message: Message, sender: Sender, db: Database, kb: Keyboards, state: FSMContext):
    await message.delete()

    data = await state.get_data()

    try:
        balance = float(message.text)
    except ValueError:
        await state.set_state(FSM.set_curier_balance)
        return await sender.sm(
            text='‚ö†‚úè  –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å',
            chat_id=message.chat.id,
            reply_markup=kb.set_curier_balance_kb()
        )

    if balance <= 0:
        await state.set_state(FSM.set_curier_balance)
        return await sender.sm(
            text='‚ö†‚úè  –í–≤–µ–¥–∏—Ç–µ –±–∞–ª–∞–Ω—Å –±–æ–ª—å—à–µ –Ω—É–ª—è',
            chat_id=message.chat.id,
            reply_markup=kb.set_curier_balance_kb()
        )

    try:
        curier_id = int(data["curier_id"])
    except TypeError:
        await state.set_state(FSM.set_curier_balance)
        return await sender.sm(
            text=f'‚ö†  –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç curier_id –≤ set_curier_balance: {data}',
            chat_id=message.chat.id,
            reply_markup=kb.set_curier_balance_kb()
        )
    except KeyError:
        await state.set_state(FSM.set_curier_balance)
        return await sender.sm(
            text=f'‚ö†  –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç curier_id –≤ set_curier_balance: {data}',
            chat_id=message.chat.id,
            reply_markup=kb.set_curier_balance_kb()
        )

    try:
        message_id = int(data["message_id"])
    except TypeError:
        await state.set_state(FSM.set_curier_balance)
        return await sender.sm(
            text=f'‚ö†  –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç message_id –≤ set_curier_balance: {data}',
            chat_id=message.chat.id,
            reply_markup=kb.set_curier_balance_kb()
        )
    except KeyError:
        await state.set_state(FSM.set_curier_balance)
        return await sender.sm(
            text=f'‚ö†  –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç message_id –≤ set_curier_balance: {data}',
            chat_id=message.chat.id,
            reply_markup=kb.set_curier_balance_kb()
        )

    curier = await db.get_curier(id=curier_id)
    if curier is None:
        await state.set_state(FSM.set_curier_balance)
        return await sender.sm(
            text=f'‚ö†  –ö—É—Ä—å–µ—Ä {curier_id} –Ω–µ –Ω–∞–∏ÃÜ–¥–µ–Ω',
            chat_id=message.chat.id,
            reply_markup=kb.set_curier_balance_kb()
        )

    curier = await db.update_curier(balance=balance, id=curier_id)

    text = await get_curier_info(curier_id=curier.id, db=db)

    await sender.sm(
        message_id=message_id,
        text=f'‚úÖ  –ë–∞–ª–∞–Ω—Å –∫—É—Ä—å–µ—Ä–∞ {curier_id} –æ–±–Ω–æ–≤–ª–µ–Ω\n\n{text}',
        chat_id=message.chat.id,
        reply_markup=kb.curier_kb(curier=curier)
    )

@r.message(FSM.set_order_time)
async def set_order_time(message: Message, sender: Sender, db: Database, kb: Keyboards, state: FSMContext):
    await message.delete()

    data = await state.get_data()

    try:
        order_id = int(data["order_id"])
    except TypeError:
        return await sender.sm(
            text=f'‚ö†  –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç order_id –≤ set_order_time: {data}',
            chat_id=message.chat.id,
            reply_markup=kb.back_to_main_kb()
        )
    except KeyError:
        return await sender.sm(
            text=f'‚ö†  –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç order_id –≤ set_order_time: {data}',
            chat_id=message.chat.id,
            reply_markup=kb.back_to_main_kb()
        )

    try:
        from_ = data["from_"]
    except TypeError:
        return await sender.sm(
            text=f'‚ö†  –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç from_ –≤ set_order_time: {data}',
            chat_id=message.chat.id,
            reply_markup=kb.back_to_main_kb()
        )
    except KeyError:
        return await sender.sm(
            text=f'‚ö†  –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç from_ –≤ set_order_time: {data}',
            chat_id=message.chat.id,
            reply_markup=kb.back_to_main_kb()
        )

    order = await db.get_order(id=order_id)
    if order is None:
        await sender.sm(
            text=f'‚ö†  –ó–∞–∫–∞–∑ {order_id} –Ω–µ –Ω–∞–∏ÃÜ–¥–µ–Ω',
            chat_id=message.chat.id,
            reply_markup=kb.back_to_main_kb()
        )

    order = await db.update_order(id=order_id, time_to_delivery=message.text)
    await state.clear()
    await sender.sm(
        message_id=data["message_id"],
        text=f'‚úÖ  –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ\n\n{await get_order_info(db=db, order_id=order_id)}',
        chat_id=message.chat.id,
        reply_markup=kb.order_kb(order=order, from_=from_)
    )